Section 13 - Clima - A Modern Weather App

Task: build a weather app that receives a City and queries a webservice API to get the local weather

1. L-130 - get the location via the phones gps position
1.1 get geolocator package and add to pubspec.yaml, import it into loading_screen
1.2 add func getLocation() that gets loc according to geolocator docs and add async to func!
1.3 change accuracy to "low" (add print to console for testing)
1.4 add permission request to AndroidManifest.xml for Android (in main folder, not debug or profile) and Info.plist for iOS as per GeoLocator instructions in chapter permissions
1.5 call method getLocation when user presses on loading_screen button

2. L-131 - async /await
2.1 create scratchfile: clima_scratch.dart WITHIN CLima-Flutter project (no new scratch file, just new file)
2.2 add code from gist to scratch to simulate first sync, then async only with Futures, then with async /await

3. L-132 - Stateful Widget Lifecycle Methods
3.1 delete content of the scaffold of loading_screen
3.2 update Scaffold so Location is printed to console immediately at loading (initState())

4. L-133 - Exception Handling & Null Aware Operators
4.1 implement a try / catch with margins:
    4.1(a) add String var to set margin
    4.1(b) add Scaffold with Container with margin & color
    4.1(c) add double.parse within try and move Scaffold within try
    4.1(d) add catch, copy Scaffold and provide default value of 30 for margin; also print error
    4.1(e) simplyfy
    4.1(f) if you catch conversion error, provide default for myMarginAsDouble
    4.1(g) even simpler - use ?? check for null
4.2 provide try/catch for getLocation() - WITHIN getLocation()!!

5.  L-134 - move getLocation() into separate Class
5.1 create class Location in location.dart & cut&paste import geolocator here
5.2 add props longitude & latitude
5.3 add getCurrentLocation & cut&paste try/Catch block from getLocation- needs to return Future<void> to enable getLocation in loading to await as well!!
5.4 assign latitude & longitude
5.5 in loading.dart:
    5.5(a) import location.dart
    5.5(b) update getLocation to create new Location obj
    5.5(c) call getCurrentLocation() - needs await to await results!!
    5.5(d) print values of lat & long - don't forget {}!!

6. L-136:  Fetching weather data via OpenWeatherMap API
6.1 add http package to pubspec.yaml
6.2 add import http package to loading_screen.dart
6.3 add getData() to loading_screen

7. L-137: JSON Parsing and Dynamic Types
7.1 import dart:convert
7.2 use jsonDecode() to get longitude
7.3 get to weather data (inside obj)
7.4 comment out 7.2 & 7.3
7.5 add temp, condition id, city name

8. L-138: register with openweathermap.org to get API key
8.1 add const apiKey
8.2 replace sample api key with own and change url from samples. to api
8.3 add lat & log variables (a) and assign to lat&long from getLocation (b)
8.4 add long and lat to api url
8.5 move getData() call into getLocation at the end
8.6 refactor getData() into networking.dart
    8.6(a) get import http and dart:conversion over
    8.6(b) create new class NetworkHelper
    8.6(c) in loading_screen combine getLocation and getData
    8.6(d) import networking.dart in loading_screen
    8.6(e) add NetworkHelper obj
    8.6(f) comment out getData and move jsonDecode into getLocationData (also some refactoring with var types
    8.6(g) add weatherData that awaits getData from networkHelper
    8.6(h) change getData() in networking.dart to return a Future (without <void> !!!)
    8.6(i) return decoded json response
8.7 move temperature/condition & cityName to location_screen

9. L-139: Add Spinner to Loading_Screen
9.1 Navigator.push() weatherData from Loading to Location Screen
9.2 add loading indicator to loading screen
    9.2(a) get flutter Spinkit package
    9.2(b) import spinkit into loading_screen
    9.2(c) add spinner to build method

10. L-140: Passing Data to a State Object - getting weatherData into
Pass data through route by adding property to widget:
10.1 add locationWeather prop to LocationScreen class and ad constr
10.2 add prop locationweather set to weatherdata to Location screen call in loading_screen
10.3 add initState() in State class of location screen
10.4 use locationWeather and get Temp, Constitution (id) and City from it -> new method updateUI
    10.4(a) add method updateUI to State obj with arg: dynamic weatherData
    10.4(b) add vars for temp, condition and city (also changed var of temp/cond& city to double, int and String respectively;
    10.4(c) assign weatherData to new vars & remove jsonDecode (handled in networking.dart)
    10.4(d) call updateUI with widget.locationWeather in initState()
10.5 change api call to return metric (temp in celsius and not kelvin)
10.6 display temp in location_screen Text widget
10.7 change temperature var to integer to avoid Render Overflow (too many digits)
10.8 refactor loading_screen:
    10.8(a) get rid of long/lat vars and replace with loc.longiture & loc.latitude.